<!DOCTYPE html>
<html lang="en">

<%- include('./partials/header.ejs') %>
</head>

<body>
<div class="modal">
    <i class="far fa-window-close"></i>
    <div class="review-card-details">
        <svg>
            <defs>
                <linearGradient id="linear-2" x1="0%" y1="0%" x2="100%" y2="100%">
                  <stop offset="0%"   stop-color="#01d3c1"/>
                  <stop offset="100%" stop-color="#cc01aa"/>
                </linearGradient>
            </defs>
            <circle class="spinner-2">
            </circle>
        </svg>
        <section id="game-info">
            <img src="" alt="Game-Image" class="poster-img">
            <div id="details-cont">
                <h1 class="title"></h1>
                <div class="rating-box">
                    <div class="score"></div>
                    <div class="bars">
                    </div>
                </div>
                <div class="game-description">
                </div>
                <div class="game-screenshots">
                    <h3>Game Screenshots</h3>
                    <div class="screenshots">
                    </div>
                </div>
                <div class="more-details">
                    <h3>More Details</h3>
                    <div class="details">
                    </div>
                </div>
            </div>
        </section>
        <div class="wedge"></div>
    </div>
</div>
<div class="container">

    <%- include('./partials/nav.ejs') %>
    
    <%- include('./partials/search.ejs') %>

    <div class="reviews-cont">
        <label class="h-r" for="highest-rated"></label>
        <div class="legend">
            <h2 class="legend-title">Legend</h2>
            <ul class="legend-icons-box">

            </ul>
        </div>
        <div class="nb">
            <span>N.B:</span>
            <span>Ratings begin at 80 and are based on critically acclaimed Metacritic scores. Results are automatically sorted based on ratings from the last 12 months</span>
        </div>
        <section id="pages">
            <div class="pages">
                <span class="review-count"></span>
                <span>Results Found</span>
            </div>
            <div class="pages">
                <span>Page</span>
                <span class="current-page">~</span>
                <span>of</span>
                <span class="num-of-pages">~</span>
            </div>
        </section>
        <section class="highest-rated" id="highest-rated">
            <svg>
                <defs>
                    <linearGradient id="linear" x1="0%" y1="0%" x2="100%" y2="100%">
                      <stop offset="0%"   stop-color="#01d3c1"/>
                      <stop offset="100%" stop-color="#cc01aa"/>
                    </linearGradient>
                </defs>
                <circle class="spinner-1">
                </circle>
            </svg>
        </section>
        <section class="cta-btns">
        </section>
    </div>
</div>

<%- include('./partials/footer.ejs') %>

<script src="https://unpkg.com/ionicons@4.5.10-0/dist/ionicons.js"></script>
<script src="functions.js"></script>
<!-- reviews script and logic -->
<script>

    const body = document.querySelector("body");

    //modal variables
    const modal = document.querySelector(".modal")
    const modalReview = document.querySelector(".modal .review-card-details")
    const modalGameInfo = document.querySelector(".modal .review-card-details #game-info")
    const modalReviewImage = document.querySelector(".modal .review-card-details img")
    const modalReviewTitle = document.querySelector(".modal .review-card-details .title")
    const modalReviewScore = document.querySelector(".modal .review-card-details .rating-box .score")
    const modalReviewBars = document.querySelector(".modal .review-card-details .rating-box .bars")
    const modalGameDescription = document.querySelector(".modal .review-card-details #game-info  #details-cont .game-description")
    const modalGameScreenshots = document.querySelector(".modal .review-card-details #game-info  #details-cont .game-screenshots .screenshots")
    const modalMoreDetails = document.querySelector(".modal .review-card-details #game-info  #details-cont .more-details .details")
    const modalCloseBtn = document.querySelector(".modal .fa-window-close")

    const reviewsCont = document.querySelector(".reviews-cont")
    const highestRated = document.querySelector(".highest-rated")
    const ctaBtnsCont = document.querySelector(".cta-btns")
    const reviewSpinner = document.querySelector(".highest-rated svg");
    const legend = document.querySelector(".legend-icons-box")
    const reviewCount = document.querySelector(".review-count")
    const currentPage = document.querySelector(".current-page")
    const numOfPages = document.querySelector(".num-of-pages")
    const highestRatedTitle = document.querySelector(".h-r")

    // dynamically and automatically generating the last twelve months for rawg api
    const diff = (Date.now() - (31610476980))
    const date3 = new Date(diff);
    const startDate = `${date3.getFullYear()}-${date3.getMonth() < 9 ? "0"+(date3.getMonth() + 1) : (date3.getMonth() + 1)}-${date3.getDate() < 10 ? "0" + date3.getDate() : date3.getDate()}`;
    
    // dynamically and automatically generating the current date for rawg api
    const date = new Date();
    let [month, day, year] = [date.getMonth(), date.getDate(), date.getFullYear()];
    month = month < 9 ? "0" + (month + 1) : month + 1;
    day = day < 10 ? "0" + day : day;
    const endDate = `${year}-${month}-${day}`;

    const parentNode = modal.parentNode;

    //highest rated dynamic title
    highestRatedTitle.innerText = `Highest Rated Recent Games`

    //modal close btn event listener
    modalCloseBtn.addEventListener("click", () => {
        body.style.overflow = "visible";
        modalReview.firstElementChild.style.display = "block";
        modalGameInfo.style.height = "0";
        modalGameInfo.style.overflow = "hidden";
        modalCloseBtn.parentElement.style.display = "none";
    })

    window.addEventListener("load", () => {
        //legend icons logic 
        fetch(`https://api.rawg.io/api/platforms/lists/parents?key=<%=RAWG_API_KEY%>`)
        .then(blob => blob.json())
        .then(data => {
            const results = data.results;
            const newResults = results.map(result => {

                let code = "fab"
                let item = result.slug
                    switch (result.name.toLowerCase()) {
                        case "pc":
                            item = "pc"
                            code = "fab"
                            break;
                        case "nintendo":
                            item = "nintendo"
                            code = "fab"
                            break;
                        case "sega":
                            item = "sega"
                            code = "fab"
                            break;
                        case "atari":
                            item = "atari"
                            code = "fab"
                            break;
                        case "3DO":
                            item = "3do"
                            code = "fab"
                            break;
                        case "commodore / amiga":
                            item = "commodore-amiga"
                            code = "fab"
                            break;
                        case "neo geo":
                            item = "neo-geo"
                            code = "fab"
                            break;
                        case "web":
                            item = "globe"
                            code = "fas"
                            break;
                        case "ios":
                            item = "apple"
                            code = "fab"
                            break;
                        case "apple macintosh":
                            item = "apple-macintosh"
                            code = "fas"
                            break;
                        default:
                            item = item;
                            code = "fab"
                            break;
                    }
                return `<li><i class="${code} fa-${item}"></i> <span>${result.name}</span></li>`
            }).join("");

            legend.innerHTML = newResults;
        })

        //review cards logic, conditional rendering and some dynamic styling 
        fetch(`https://api.rawg.io/api/games?page=1&page_size=12&dates=${startDate},${endDate}&metacritic=80,99&key=<%=RAWG_API_KEY%>`)
        .then(blob => blob.json())
        .then(data => {
            const results = data.results;
            reviewCount.innerText = data.count
            const link = data.next;

            const urlSearchParams = new URLSearchParams(link);
            const params = Object.fromEntries(urlSearchParams.entries());

            let currentPageVal = Number(params.page);
            currentPageVal = currentPageVal - 1;
            currentPage.innerText = currentPageVal;

            let numOfPagesVal = Math.ceil(data.count / Number(params.page_size));
            numOfPages.innerText = numOfPagesVal

            if (results.length === 0) {
                ctaBtnsCont.innerHTML = "";
                currentPage.innerText = 0;
                numOfPages.innerText = 0;
                reviewSpinner.style.display = "none";
                const message = `No results found.Try refreshing this page!`;
                const pAlert = document.createElement("p");
                const pImage = document.createElement("img");
                pAlert.classList.add("p-alert");
                pImage.classList.add("p-image");
                pImage.src = "/not-found.svg";
                pAlert.innerText = message;
                highestRated.appendChild(pAlert);
                highestRated.appendChild(pImage);
                return;
            }

            //clear spinner svg
            reviewSpinner.style.display = "none";

            //cta buttons logic
            const prevRevBtn = document.createElement('button')
            const nextRevBtn = document.createElement('button')
            
            prevRevBtn.setAttribute("data-location", `${data.previous}`)
            nextRevBtn.setAttribute("data-location", `${data.next}`)

            prevRevBtn.className = "cta-btn";
            nextRevBtn.className = "cta-btn";

            prevRevBtn.id = "prev-revs";
            nextRevBtn.id = "next-revs";

            prevRevBtn.innerText = "Previous"
            nextRevBtn.innerText = "Next"

            const ctaBtns = document.querySelector(".cta-btns");
            ctaBtns.appendChild(prevRevBtn);
            ctaBtns.appendChild(nextRevBtn);

            if (prevRevBtn.dataset.location === "null") {
                prevRevBtn.disabled = true;
                prevRevBtn.classList.add("disabled");
            } else if (nextRevBtn.dataset.location === "null") {
                nextRevBtn.disabled = true;
                nextRevBtn.classList.add("disabled");
            } else {
                prevRevBtn.disabled = false;
                prevRevBtn.classList.remove("disabled");

                nextRevBtn.disabled = false;
                nextRevBtn.classList.remove("disabled");
            }

            results.forEach(element => {
                const parent = document.createElement('div');
                const poster = document.createElement('img');
                const infoBox = document.createElement('div');
                const metacriticBox = document.createElement('div');
                const metacriticScore = document.createElement('p');
                const gameName = document.createElement('h3');
                const platforms = document.createElement('div');
                const ratings = document.createElement('div');
                const released = document.createElement('div');

                let platsArray = [];
                element.parent_platforms.forEach(p => platsArray.push(p.platform.name))

                parent.className = "review-card";
                metacriticBox.className = "mc-box";
                metacriticScore.className = "mc-score";
                platforms.className = "platforms";
                ratings.className = "rating";
                released.className = " released";

                function populatePlats(arr, cont) {
                    let code = "fab"
                    let newArr = arr.map((item, i) => {
                        switch (item.toLowerCase()) {
                            case "pc":
                                item = ""
                                code = "desktop-pc"
                                break;
                            case "nintendo":
                                item = ""
                                code = "nintendo-icon"
                                break;
                            default:
                                item = item;
                                code = "fab"
                                break;
                        }
                        return `<i class="${code} fa-${item.toLowerCase()} platform-icons"></i>`
                    }).join("");
                    return cont.innerHTML = newArr
                }

                poster.src = element.background_image;
                gameName.innerText = element.name;
                metacriticScore.innerText = element.metacritic;
                platforms.innerHTML = `<span>Platforms:</span> ${populatePlats(platsArray, platforms)}`;
                ratings.innerHTML = `<span>Rating:</span> 
                                     <span class="outer-stars">
                                        <span class="inner-stars" style="width: ${Number(element.rating) * 20}%";>
                                        </span>
                                     </span>
                                     <span class="rating-details">
                                        ${element.rating}/${element.rating_top}
                                     </span>`;
                released.innerHTML = `<span>Released:</span> ${element.released}`;

                //adding event listener to review card
                parent.addEventListener("click", () => {
                    body.style.overflow = "hidden"
                    modal.style.display = "flex";

                    fetch(`https://api.rawg.io/api/games/${element.id}?key=<%=RAWG_API_KEY%>`)
                    .then((blob) => blob.json())
                    .then((file) => {
                        const gameInfo = file;
                        modalGameInfo.style.height = "fit-content";
                        modalGameInfo.style.overflow = "visible";
                        modalReview.firstElementChild.style.display = "none";
                        modalReviewImage.src = gameInfo.background_image;
                        modalReviewImage.alt = gameInfo.slug;
                        modalReviewTitle.innerText = gameInfo.name;
                        modalReviewScore.innerHTML = `<h3>Rating $ Reviews</h3>
                                                    <p>${gameInfo.rating}</p>
                                                    <span class="outer-stars">
                                                        <span class="inner-stars" style="width: ${Number(gameInfo.rating) * 20}%";>
                                                        </span>
                                                    </span>`;
                        // rating bars logic
                        const ratingArr = gameInfo.ratings;
                        function barsInnerHtml(arr) {
                            let returnString = "";
                            arr.forEach(i => {
                                const value = `<div class="bar"><div class="inner-bar" style="width: ${i.percent}%"></div><p>${i.title}</p></div>`
                                returnString = returnString.concat(value)
                            })
                            return returnString
                        }
                        modalReviewBars.innerHTML = `${barsInnerHtml(ratingArr)}<p class="rating-count">Total Ratings Count: <span>${gameInfo.ratings_count}</span></p>`;
                        modalGameDescription.innerHTML = `
                                                            <h3>Game Description</h3>
                                                            <img src="${gameInfo.background_image_additional}">
                                                            <p>${gameInfo.description_raw}</p>
                                                        `;
                        //screenshots logic
                        function screenShots (arr) {
                            let initialStr = "";
                            arr.forEach(item => {
                                initialStr = initialStr + `<img src=${item.image}>`;
                            })
                            return initialStr;
                        }
                        fetch(`https://api.rawg.io/api/games/${gameInfo.id}/screenshots?key=<%=RAWG_API_KEY%>`)
                        .then(box => box.json())
                        .then(shots => {
                            let shotsArr = shots.results;
                            let finalShotsStr = screenShots(shotsArr)
                            modalGameScreenshots.innerHTML = finalShotsStr;
                        })
                        //screenshots logic ends here

                        //publisher string
                        let publisherStr = "";
                        for (let i = 0; i < gameInfo.publishers.length; i++) {
                            const element = gameInfo.publishers[i];
                            if (i === ((gameInfo.publishers.length) - 1)) {
                                publisherStr = publisherStr + element.name;
                            } else {
                                publisherStr = publisherStr + element.name + ", "
                            }
                        };

                        //developer string
                        let devStr = "";
                        for (let i = 0; i < gameInfo.developers.length; i++) {
                            const element = gameInfo.developers[i];
                            if (i === ((gameInfo.developers.length) - 1)) {
                                devStr = devStr + element.name;
                            } else {
                                devStr = devStr + element.name + ", "
                            }
                        };
                        
                        //genre string
                        let genreStr = "";
                        for (let i = 0; i < gameInfo.genres.length; i++) {
                            const element = gameInfo.genres[i];
                            if (i === ((gameInfo.genres.length) - 1)) {
                                genreStr = genreStr + element.name;
                            } else {
                                genreStr = genreStr + element.name + " | "
                            }
                        };
                        //platforms string
                        let platformStr = "";
                        for (let i = 0; i < gameInfo.platforms.length; i++) {
                            const element = gameInfo.platforms[i];
                            if (i === ((gameInfo.platforms.length) - 1)) {
                                platformStr = platformStr + element.platform.name;
                            } else {
                                platformStr = platformStr + element.platform.name + " | "
                            }
                        };

                        modalMoreDetails.innerHTML = `
                                                    <p>Released: <span>${gameInfo.released ? gameInfo.released : "N/A"}</></p>
                                                    <p>Publishers: <span>${gameInfo.publishers ? publisherStr : "N/A"}</></p>
                                                    <p>Developer: <span>${gameInfo.developers ? devStr : "N/A"}</></p>
                                                    <p>Genres: <span>${gameInfo.genres ? genreStr : "N/A"}</></p>
                                                    <p>ESRB Rating: <span>${gameInfo.esrb_rating === null ? "N/A" : gameInfo.esrb_rating.name}</></p>
                                                    <p>Metacritic Score: <span>${gameInfo.metacritic ? gameInfo.metacritic + ` <a href=${gameInfo.metacritic_url} target="_blank" rel="noopener noreferrer">Click here to redirect to metacritic</a>` : "N/A"}</></p>
                                                    <p>Reviews Count: <span>${gameInfo.reviews_count ? gameInfo.reviews_count : "N/A"}</></p>
                                                    <p>Platforms: <span>${gameInfo.platforms ? platformStr : "N/A"}</></p>
                                                    <p>Game Website: <a href=${gameInfo.website} target="_blank" rel="noopener noreferrer">${gameInfo.platforms ? "Click here to visit game website" : "N/A"}</a></p>
                                                    `
                    })
                })

                parent.appendChild(poster)
                parent.appendChild(infoBox)
                parent.appendChild(metacriticBox)
                metacriticBox.appendChild(metacriticScore)
                infoBox.appendChild(gameName)
                infoBox.appendChild(platforms)
                infoBox.appendChild(ratings)
                infoBox.appendChild(released)
                highestRated.appendChild(parent)
                
            });
        })
        .catch(e => {
            console.log(e)
            ctaBtnsCont.innerHTML = "";
            currentPage.innerText = 0;
            numOfPages.innerText = 0;
            reviewSpinner.style.display = "none";
            const message = `Error fetching data, Please check your network and try refreshing the page.`;

            const pAlert = document.createElement("p");
            const pImage = document.createElement("img");
            pAlert.classList.add("p-alert");
            pImage.classList.add("p-image");
            pImage.src = "/not-found.svg";
            pAlert.innerText = message;
            highestRated.appendChild(pAlert);
            highestRated.appendChild(pImage);
            return;
        });
    })
    
    ctaBtnsCont.addEventListener("click", (e) => {
        if (e.target.className === "cta-btn") {
            highestRated.firstElementChild.style.display = "block";
            const spinner = highestRated.firstElementChild;
            highestRated.innerHTML = "";
            highestRated.appendChild(spinner);
            ctaBtnsCont.innerHTML = "";

            //fetch logic
            fetch(e.target.dataset.location)
            .then(blob => blob.json())
            .then(data => {
                const results = data.results;
                switch (e.target.id) {
                    case 'prev-revs':
                        currentPage.innerText = Number(currentPage.innerText) - 1;
                        break;
                    case 'next-revs':
                        currentPage.innerText = Number(currentPage.innerText) + 1;
                        break;
                    default:
                        break;
                }

                //clear spinner svg
                reviewSpinner.style.display = "none";

                //cta buttons logic
                const prevRevBtn = document.createElement('button')
                const nextRevBtn = document.createElement('button')
                
                prevRevBtn.setAttribute("data-location", `${data.previous}`)
                nextRevBtn.setAttribute("data-location", `${data.next}`)

                prevRevBtn.className = "cta-btn";
                nextRevBtn.className = "cta-btn";

                prevRevBtn.id = "prev-revs";
                nextRevBtn.id = "next-revs";

                prevRevBtn.innerText = "Previous"
                nextRevBtn.innerText = "Next"

                const ctaBtns = document.querySelector(".cta-btns");
                ctaBtns.appendChild(prevRevBtn);
                ctaBtns.appendChild(nextRevBtn);

                if (prevRevBtn.dataset.location === "null") {
                    prevRevBtn.disabled = true;
                    prevRevBtn.classList.add("disabled");
                } else if (nextRevBtn.dataset.location === "null") {
                    nextRevBtn.disabled = true;
                    nextRevBtn.classList.add("disabled");
                } else {
                    prevRevBtn.disabled = false;
                    prevRevBtn.classList.remove("disabled");

                    nextRevBtn.disabled = false;
                    nextRevBtn.classList.remove("disabled");
                }

                results.forEach(element => {
                    const parent = document.createElement('div');
                    const poster = document.createElement('img');
                    const infoBox = document.createElement('div');
                    const metacriticBox = document.createElement('div');
                    const metacriticScore = document.createElement('p');
                    const gameName = document.createElement('h3');
                    const platforms = document.createElement('div');
                    const ratings = document.createElement('div');
                    const released = document.createElement('div');

                    let platsArray = [];
                    element.parent_platforms.forEach(p => platsArray.push(p.platform.name))

                    parent.className = "review-card";
                    metacriticBox.className = "mc-box";
                    metacriticScore.className = "mc-score";
                    platforms.className = "platforms";
                    ratings.className = "rating";
                    released.className = " released";

                    function populatePlats(arr, cont) {
                        let code = "fab"
                        let newArr = arr.map((item, i) => {
                            switch (item.toLowerCase()) {
                                case "pc":
                                    item = ""
                                    code = "desktop-pc"
                                    break;
                                case "nintendo":
                                    item = ""
                                    code = "nintendo-icon"
                                    break;
                                default:
                                    item = item;
                                    code = "fab"
                                    break;
                            }
                            return `<i class="${code} fa-${item.toLowerCase()} platform-icons"></i>`
                        }).join("");
                        return cont.innerHTML = newArr
                    }

                    poster.src = element.background_image;
                    gameName.innerText = element.name;
                    metacriticScore.innerText = element.metacritic;
                    platforms.innerHTML = `<span>Platforms:</span> ${populatePlats(platsArray, platforms)}`;
                    ratings.innerHTML = `<span>Rating:</span> 
                                         <span class="outer-stars">
                                            <span class="inner-stars" style="width: ${Number(element.rating) * 20}%";>
                                            </span>
                                         </span>
                                         <span class="rating-details">
                                            ${element.rating}/${element.rating_top}
                                         </span>`;
                    released.innerHTML = `<span>Released:</span> ${element.released}`;

                    parent.addEventListener("click", () => {
                    body.style.overflow = "hidden"
                    modal.style.display = "flex";

                    fetch(`https://api.rawg.io/api/games/${element.id}?key=<%=RAWG_API_KEY%>`)
                    .then((blob) => blob.json())
                    .then((file) => {
                        const gameInfo = file;
                        console.log(gameInfo)
                        modalGameInfo.style.height = "fit-content";
                        modalGameInfo.style.overflow = "visible";
                        modalReview.firstElementChild.style.display = "none";
                        modalReviewImage.src = gameInfo.background_image;
                        modalReviewTitle.innerText = gameInfo.name;
                        modalReviewScore.innerHTML = `<h3>Rating $ Reviews</h3>
                                                    <p>${gameInfo.rating}</p>
                                                    <span class="outer-stars">
                                                        <span class="inner-stars" style="width: ${Number(gameInfo.rating) * 20}%";>
                                                        </span>
                                                    </span>`;
                        // rating bars logic
                        const ratingArr = gameInfo.ratings;
                        function barsInnerHtml(arr) {
                            let returnString = "";
                            arr.forEach(i => {
                                const value = `<div class="bar"><div class="inner-bar" style="width: ${i.percent}%"></div><p>${i.title}</p></div>`
                                returnString = returnString.concat(value)
                            })
                            return returnString
                        }
                        modalReviewBars.innerHTML = `${barsInnerHtml(ratingArr)}<p class="rating-count">Total Ratings Count: <span>${gameInfo.ratings_count}</span></p>`;
                        modalGameDescription.innerHTML = `
                                                            <h3>Game Description</h3>
                                                            <img src="${gameInfo.background_image_additional}">
                                                            <p>${gameInfo.description_raw}</p>
                                                        `;
                        //screenshots logic
                        function screenShots (arr) {
                            let initialStr = "";
                            arr.forEach(item => {
                                initialStr = initialStr + `<img src=${item.image}>`;
                            })
                            return initialStr;
                        }
                        fetch(`https://api.rawg.io/api/games/${gameInfo.id}/screenshots?key=<%=RAWG_API_KEY%>`)
                        .then(box => box.json())
                        .then(shots => {
                            let shotsArr = shots.results;
                            console.log(shotsArr)
                            let finalShotsStr = screenShots(shotsArr)
                            modalGameScreenshots.innerHTML = finalShotsStr;
                        })
                        //screenshots logic ends here

                        //publisher string
                        let publisherStr = "";
                        for (let i = 0; i < gameInfo.publishers.length; i++) {
                            const element = gameInfo.publishers[i];
                            if (i === ((gameInfo.publishers.length) - 1)) {
                                publisherStr = publisherStr + element.name;
                            } else {
                                publisherStr = publisherStr + element.name + ", "
                            }
                        };

                        //developer string
                        let devStr = "";
                        for (let i = 0; i < gameInfo.developers.length; i++) {
                            const element = gameInfo.developers[i];
                            if (i === ((gameInfo.developers.length) - 1)) {
                                devStr = devStr + element.name;
                            } else {
                                devStr = devStr + element.name + ", "
                            }
                        };
                        
                        //genre string
                        let genreStr = "";
                        for (let i = 0; i < gameInfo.genres.length; i++) {
                            const element = gameInfo.genres[i];
                            if (i === ((gameInfo.genres.length) - 1)) {
                                genreStr = genreStr + element.name;
                            } else {
                                genreStr = genreStr + element.name + " | "
                            }
                        };
                        //platforms string
                        let platformStr = "";
                        for (let i = 0; i < gameInfo.platforms.length; i++) {
                            const element = gameInfo.platforms[i];
                            if (i === ((gameInfo.platforms.length) - 1)) {
                                platformStr = platformStr + element.platform.name;
                            } else {
                                platformStr = platformStr + element.platform.name + " | "
                            }
                        };

                        modalMoreDetails.innerHTML = `
                                                    <p>Released: <span>${gameInfo.released ? gameInfo.released : "N/A"}</></p>
                                                    <p>Publishers: <span>${gameInfo.publishers ? publisherStr : "N/A"}</></p>
                                                    <p>Developer: <span>${gameInfo.developers ? devStr : "N/A"}</></p>
                                                    <p>Genres: <span>${gameInfo.genres ? genreStr : "N/A"}</></p>
                                                    <p>ESRB Rating: <span>${gameInfo.esrb_rating === null ? "N/A" : gameInfo.esrb_rating.name}</></p>
                                                    <p>Metacritic Score: <span>${gameInfo.metacritic ? gameInfo.metacritic + ` <a href=${gameInfo.metacritic_url} target="_blank" rel="noopener noreferrer">Click here to redirect to metacritic</a>` : "N/A"}</></p>
                                                    <p>Reviews Count: <span>${gameInfo.reviews_count ? gameInfo.reviews_count : "N/A"}</></p>
                                                    <p>Platforms: <span>${gameInfo.platforms ? platformStr : "N/A"}</></p>
                                                    <p>Game Website: <a href=${gameInfo.website} target="_blank" rel="noopener noreferrer">${gameInfo.platforms ? "Click here to visit game website" : "N/A"}</a></p>
                                                    `
                    })
                })

                    parent.appendChild(poster)
                    parent.appendChild(infoBox)
                    parent.appendChild(metacriticBox)
                    metacriticBox.appendChild(metacriticScore)
                    infoBox.appendChild(gameName)
                    infoBox.appendChild(platforms)
                    infoBox.appendChild(ratings)
                    infoBox.appendChild(released)

                    highestRated.appendChild(parent)
                });
            })
            .catch(e => {
                ctaBtnsCont.innerHTML = "";
                currentPage.innerText = 0;
                numOfPages.innerText = 0;
                spinLoadSvg.style.display = "none";
                const message = `Error fetching data, Please check your network and try refreshin the page.`;

                const pAlert = document.createElement("p");
                const pImage = document.createElement("img");
                pAlert.classList.add("p-alert");
                pImage.classList.add("p-image");
                pImage.src = "/not-found.svg";
                pAlert.innerText = message;
                highestRated.appendChild(pAlert);
                highestRated.appendChild(pImage);
                return;
                })
        }
    })

    modalGameScreenshots.addEventListener("click", (e) => {
        if (e.target.tagName === "IMG") {
            const displayBox = document.createElement("div");
            const cancelBtn = document.createElement("i");
            const img = document.createElement("img");

            parentNode.insertBefore(displayBox, modal);
            displayBox.appendChild(cancelBtn);
            displayBox.appendChild(img);

            displayBox.classList.add("img-modal")
            cancelBtn.classList.add("far", "fa-window-close")
            img.classList.add("fullscreen")

            img.src = e.target.src;

            cancelBtn.addEventListener("click", () => {
                displayBox.remove();
            })
        }
    })

</script>

<!-- reviews search logic -->
<script>
    const nb = document.querySelector('.nb span:nth-child(2)');
    const pages = document.querySelector('.pages');
    const searchForm = document.querySelector("#search-form");
    const reviewsSearch = document.querySelector("#search-form #reviews-search");

    const homeSearchVal = sessionStorage.getItem("homeSearchVal")


    searchForm.addEventListener('submit', (e) => {
        e.preventDefault();
        if (reviewsSearch.value.trim() === "") return;

        const searchVal = reviewsSearch.value;
        reviewsSearch.value = "";
        reviewsSearch.disabled = true;
        const spinLoadSvg = highestRated.firstElementChild;
        highestRated.innerHTML = "";
        spinLoadSvg.style.display = "block";
        highestRated.appendChild(spinLoadSvg);
        ctaBtnsCont.innerHTML = "";

        //search rawg database for matching results with search value
        fetch(`https://api.rawg.io/api/games?search=${searchVal}&metacritic=1,99&page=1&page_size=12&search_precise=true&key=<%=RAWG_API_KEY%>`)
        .then(blob => blob.json())
        .then(response => {
            reviewsSearch.disabled = false;
            reviewsSearch.focus();

            highestRatedTitle.innerText = `Search results for '${searchVal}'`;
            nb.innerText = "search results are based on search input value"
            console.log(response);
            const results = response.results;
            reviewCount.innerText = response.count
            const link = response.next;

            if (results.length === 0) {
                ctaBtnsCont.innerHTML = "";
                currentPage.innerText = 0;
                numOfPages.innerText = 0;
                spinLoadSvg.style.display = "none";
                const message = `No results for '${searchVal}' found.Try searching again!`;

                const pAlert = document.createElement("p");
                const pImage = document.createElement("img");
                pAlert.classList.add("p-alert");
                pImage.classList.add("p-image");
                pImage.src = "/not-found.svg";
                pAlert.innerText = message;
                highestRated.appendChild(pAlert);
                highestRated.appendChild(pImage);
                return;
            }

            const urlSearchParams = new URLSearchParams(link);
            const params = Object.fromEntries(urlSearchParams.entries());

            let currentPageVal = Number(params.page);
            currentPageVal = currentPageVal - 1;
            currentPage.innerText = currentPageVal;

            let numOfPagesVal = Math.ceil(response.count / Number(params.page_size));
            numOfPages.innerText = numOfPagesVal;

            //clear spinner svg
            reviewSpinner.style.display = "none";

            //cta buttons logic
            const prevRevBtn = document.createElement('button')
            const nextRevBtn = document.createElement('button')
            
            prevRevBtn.setAttribute("data-location", `${response.previous}`)
            nextRevBtn.setAttribute("data-location", `${response.next}`)

            prevRevBtn.className = "cta-btn";
            nextRevBtn.className = "cta-btn";

            prevRevBtn.id = "prev-revs";
            nextRevBtn.id = "next-revs";

            prevRevBtn.innerText = "Previous"
            nextRevBtn.innerText = "Next"

            const ctaBtns = document.querySelector(".cta-btns");
            ctaBtns.appendChild(prevRevBtn);
            ctaBtns.appendChild(nextRevBtn);

            if (prevRevBtn.dataset.location === "null") {
                prevRevBtn.disabled = true;
                prevRevBtn.classList.add("disabled");
            } else if (nextRevBtn.dataset.location === "null") {
                nextRevBtn.disabled = true;
                nextRevBtn.classList.add("disabled");
            } else {
                prevRevBtn.disabled = false;
                prevRevBtn.classList.remove("disabled");

                nextRevBtn.disabled = false;
                nextRevBtn.classList.remove("disabled");
            }

            
            // condition for response count less than or equal to 12
            if (response.count <= 12) {
                ctaBtnsCont.innerHTML = "";
                currentPage.innerText = 1;
                numOfPages.innerText = 1;
            }

            results.forEach(element => {
                const parent = document.createElement('div');
                const poster = document.createElement('img');
                const infoBox = document.createElement('div');
                const metacriticBox = document.createElement('div');
                const metacriticScore = document.createElement('p');
                const gameName = document.createElement('h3');
                const platforms = document.createElement('div');
                const ratings = document.createElement('div');
                const released = document.createElement('div');

                let platsArray = [];
                element.parent_platforms.forEach(p => platsArray.push(p.platform.name))

                parent.className = "review-card";
                metacriticBox.className = "mc-box";
                metacriticScore.className = "mc-score";
                platforms.className = "platforms";
                ratings.className = "rating";
                released.className = " released";

                function populatePlats(arr, cont) {
                    let code = "fab"
                    let newArr = arr.map((item, i) => {
                        switch (item.toLowerCase()) {
                            case "pc":
                                item = ""
                                code = "desktop-pc"
                                break;
                            case "nintendo":
                                item = ""
                                code = "nintendo-icon"
                                break;
                            default:
                                item = item;
                                code = "fab"
                                break;
                        }
                        return `<i class="${code} fa-${item.toLowerCase()} platform-icons"></i>`
                    }).join("");
                    return cont.innerHTML = newArr
                }

                poster.src = element.background_image;
                gameName.innerText = element.name;
                metacriticScore.innerText = element.metacritic === null ? "N/A" : element.metacritic;
                platforms.innerHTML = `<span>Platforms:</span> ${populatePlats(platsArray, platforms)}`;
                ratings.innerHTML = `<span>Rating:</span> 
                                     <span class="outer-stars">
                                        <span class="inner-stars" style="width: ${Number(element.rating) * 20}%";>
                                        </span>
                                     </span>
                                     <span class="rating-details">
                                        ${element.rating}
                                     </span>`;
                released.innerHTML = `<span>Released:</span> ${element.released}`;

                //adding event listener to review card
                parent.addEventListener("click", () => {
                    body.style.overflow = "hidden"
                    modal.style.display = "flex";

                    fetch(`https://api.rawg.io/api/games/${element.id}?key=<%=RAWG_API_KEY%>`)
                    .then((blob) => blob.json())
                    .then((file) => {
                        const gameInfo = file;
                        console.log(gameInfo)
                        modalGameInfo.style.height = "fit-content";
                        modalGameInfo.style.overflow = "visible";
                        modalReview.firstElementChild.style.display = "none";
                        modalReviewImage.src = gameInfo.background_image;
                        modalReviewTitle.innerText = gameInfo.name;
                        modalReviewScore.innerHTML = `<h3>Rating $ Reviews</h3>
                                                    <p>${gameInfo.rating}</p>
                                                    <span class="outer-stars">
                                                        <span class="inner-stars" style="width: ${Number(gameInfo.rating) * 20}%";>
                                                        </span>
                                                    </span>`;
                        // rating bars logic
                        const ratingArr = gameInfo.ratings;
                        function barsInnerHtml(arr) {
                            let returnString = "";
                            arr.forEach(i => {
                                const value = `<div class="bar"><div class="inner-bar" style="width: ${i.percent}%"></div><p>${i.title}</p></div>`
                                returnString = returnString.concat(value)
                            })
                            return returnString
                        }
                        modalReviewBars.innerHTML = `${barsInnerHtml(ratingArr)}<p class="rating-count">Total Ratings Count: <span>${gameInfo.ratings_count}</span></p>`;
                        modalGameDescription.innerHTML = `
                                                            <h3>Game Description</h3>
                                                            <img src="${gameInfo.background_image_additional}">
                                                            <p>${gameInfo.description_raw}</p>
                                                        `;
                        //screenshots logic
                        function screenShots (arr) {
                            let initialStr = "";
                            arr.forEach(item => {
                                initialStr = initialStr + `<img src=${item.image}>`;
                            })
                            return initialStr;
                        }
                        fetch(`https://api.rawg.io/api/games/${gameInfo.id}/screenshots?key=<%=RAWG_API_KEY%>`)
                        .then(box => box.json())
                        .then(shots => {
                            let shotsArr = shots.results;
                            console.log(shotsArr)
                            let finalShotsStr = screenShots(shotsArr)
                            modalGameScreenshots.innerHTML = finalShotsStr;
                        })
                        //screenshots logic ends here

                        //publisher string
                        let publisherStr = "";
                        for (let i = 0; i < gameInfo.publishers.length; i++) {
                            const element = gameInfo.publishers[i];
                            if (i === ((gameInfo.publishers.length) - 1)) {
                                publisherStr = publisherStr + element.name;
                            } else {
                                publisherStr = publisherStr + element.name + ", "
                            }
                        };

                        //developer string
                        let devStr = "";
                        for (let i = 0; i < gameInfo.developers.length; i++) {
                            const element = gameInfo.developers[i];
                            if (i === ((gameInfo.developers.length) - 1)) {
                                devStr = devStr + element.name;
                            } else {
                                devStr = devStr + element.name + ", "
                            }
                        };
                        
                        //genre string
                        let genreStr = "";
                        for (let i = 0; i < gameInfo.genres.length; i++) {
                            const element = gameInfo.genres[i];
                            if (i === ((gameInfo.genres.length) - 1)) {
                                genreStr = genreStr + element.name;
                            } else {
                                genreStr = genreStr + element.name + " | "
                            }
                        };
                        //platforms string
                        let platformStr = "";
                        for (let i = 0; i < gameInfo.platforms.length; i++) {
                            const element = gameInfo.platforms[i];
                            if (i === ((gameInfo.platforms.length) - 1)) {
                                platformStr = platformStr + element.platform.name;
                            } else {
                                platformStr = platformStr + element.platform.name + " | "
                            }
                        };

                        modalMoreDetails.innerHTML = `
                                                    <p>Released: <span>${gameInfo.released ? gameInfo.released : "N/A"}</></p>
                                                    <p>Publishers: <span>${gameInfo.publishers ? publisherStr : "N/A"}</></p>
                                                    <p>Developer: <span>${gameInfo.developers ? devStr : "N/A"}</></p>
                                                    <p>Genres: <span>${gameInfo.genres ? genreStr : "N/A"}</></p>
                                                    <p>ESRB Rating: <span>${gameInfo.esrb_rating === null ? "N/A" : gameInfo.esrb_rating.name}</></p>
                                                    <p>Metacritic Score: <span>${gameInfo.metacritic ? gameInfo.metacritic + ` <a href=${gameInfo.metacritic_url} target="_blank" rel="noopener noreferrer">Click here to redirect to metacritic</a>` : "N/A"}</></p>
                                                    <p>Reviews Count: <span>${gameInfo.reviews_count ? gameInfo.reviews_count : "N/A"}</></p>
                                                    <p>Platforms: <span>${gameInfo.platforms ? platformStr : "N/A"}</></p>
                                                    <p>Game Website: <a href=${gameInfo.website} target="_blank" rel="noopener noreferrer">${gameInfo.platforms ? "Click here to visit game website" : "N/A"}</a></p>
                                                    `
                    })
                })

                parent.appendChild(poster)
                parent.appendChild(infoBox)
                parent.appendChild(metacriticBox)
                metacriticBox.appendChild(metacriticScore)
                infoBox.appendChild(gameName)
                infoBox.appendChild(platforms)
                infoBox.appendChild(ratings)
                infoBox.appendChild(released)
                highestRated.appendChild(parent)
                
            });
        })
        .catch(e => {
            ctaBtnsCont.innerHTML = "";
            currentPage.innerText = 0;
            numOfPages.innerText = 0;
            spinLoadSvg.style.display = "none";
            const message = `Error fetching data, Please check your network and try searching again`;

            const pAlert = document.createElement("p");
            const pImage = document.createElement("img");
            pAlert.classList.add("p-alert");
            pImage.classList.add("p-image");
            pImage.src = "/not-found.svg";
            pAlert.innerText = message;
            highestRated.appendChild(pAlert);
            highestRated.appendChild(pImage);
            return;
        });
    })

    if(homeSearchVal) {
            reviewsSearch.value = homeSearchVal;
            searchForm.requestSubmit()
            sessionStorage.removeItem("homeSearchVal")
    }


</script>

</body>
</html>